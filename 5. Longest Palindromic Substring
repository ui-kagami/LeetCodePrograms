class Solution {
    public String longestPalindrome(String s) {
        if(s == null || s == ""){
            return "";
        }
        
        int totalLen = s.length();
        int start = 0;
        int end = 0;
        
        for(int i = 0; i < totalLen; i++){
            int len1 = expandString(s, i, i);   // check for strings like "racecar"
            int len2 = expandString(s, i, i+1); // check for strings like 'abba'
            int len = Math.max(len1, len2);
            if(len > end - start){             // if true, found new longest substring
                start = i - ((len - 1) / 2);
                end = i + (len / 2);
            }
        }
        return s.substring(start, end + 1);
    }
        //expand on String until unmatch
    public int expandString(String s, int left, int right){
        if(s == null || left > right){
            return 0;
        }
        
        while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)){
            left--;
            right++;
        }
        return right - left - 1;
    }
}
